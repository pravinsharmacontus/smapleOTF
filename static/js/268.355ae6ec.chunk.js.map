{"version":3,"file":"static/js/268.355ae6ec.chunk.js","mappings":"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","sources":["components/Login/ResetPassword.jsx","store/action/resetPassAction.js","components/Registration/PasswordPolicyValidation.jsx","components/Registration/registerValidate.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Login.scss';\nimport _get from \"lodash/get\";\nimport Loader from \"../../common/Loader\";\nimport { useTranslation } from \"react-i18next\";\nimport { failToast } from \"../../helper/ApiToast\";\nimport { Link, Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    ImgLogo,\n    IconPasswordHidenewicon,\n    IconPasswordViewnewicon,\n    PassIcon,\n} from '../../assets/images';\nimport {\n    validateForm,\n    passwordValidate,\n    passwordMatchCheck,\n    passwordEncrypt\n} from '../../helper/Validation';\nimport {\n    doCreatePassword,\n    doResetPassAction,\n} from '../../store/action/resetPassAction';\nimport {\n    errMsg,\n    buttonName,\n    pageHeading,\n    pathChenage,\n    errMsgDesignClass,\n    passwordTypeChange,\n    emptyInputErrorMsgThrow,\n    findEmptyOrNotLoginInput,\n    resetPasswortErrorValiDate,\n    userLogRoleId,\n} from './loginPageCommon';\nimport Ripples from 'react-ripples';\nimport { passwordPolicyUpdate } from '../Registration/registerValidate';\nimport PasswordPolicyValidation from '../Registration/PasswordPolicyValidation';\n\nconst errorMsgAllow = (emptyError = false, validationErr = false) => {\n    return emptyError || validationErr ? true : false;\n};\n\nconst ResetPassword = (props = {}) => {\n    const { match: { params: { token: Retoken = \"\" } = {}, path = \"\" } = {} } = props;\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const pathType = path;\n    const _customId = \"ResetPassword\";\n    const [errNewpass, setErrNewpass] = useState(false);\n    const [errConpass, setErrConpass] = useState(false);\n    const [passwordType, setPasswordType] = useState(true);//reset Password->true ,create Password ->false\n    const [isValidForm, setpassValidForm] = useState(false);\n    const [PasswordPolicy, setPasswordPolicy] = useState(true);\n    const [conpasswordType, setConPasswordType] = useState(\"password\");\n    const [newpasswordType, setNewPasswordType] = useState(\"password\");\n    const globalStore = useSelector((state) => state || {});//store\n    const { loginPage: { isLoading = false } = {} } = globalStore;//store\n    const tempHide = false;\n\n    const [newPasswordPolicy, setNewPasswordPolicy] = useState({\n        lowerCase: false,\n        upperCase: false,\n        numberCase: false,\n        specialCase: false,\n        eightDigitCase: false,\n    });\n\n    const [passwordValue, setpasswordValue] = useState({\n        newPassword: \"\",\n        conpassword: \"\",\n    });\n    const [errpasswordValue, seterrpasswordValue] = useState({\n        newPassword: false,\n        conpassword: false,\n    });\n    const [onErrinputPass, setonErrinputPass] = useState({\n        email: false,\n        confirmEmail: false,\n    });\n\n    const newPasswordEye = () => {\n        setNewPasswordType(passwordTypeChange(newpasswordType));\n    };\n\n    const conPasswordEye = () => {\n        setConPasswordType(passwordTypeChange(conpasswordType));\n    };\n\n    const onChangeHandler = (event = {}) => {\n        event.preventDefault();\n        const { name = \"\", value = \"\" } = _get(event, \"target\", {});\n        const errors = errpasswordValue;\n        switch (name) {\n            case 'newPassword':\n                setNewPasswordPolicy(passwordPolicyUpdate(value));\n                errors.newPassword = passwordValidate(value); //validation fron password policy\n                break;\n            case 'conpassword':\n                errors.conpassword = passwordValidate(value); //validation fron password policy\n                break;\n            default:\n                break;\n        }\n        setpasswordValue({ ...passwordValue, [name]: value });\n        seterrpasswordValue(errors);\n        setpassValidForm(validateForm(errors));\n        const { newPassword, conpassword } = errors;  //on email and password type on field validate\n        newPassword && setErrNewpass(false); //password policy is crct hide error msg\n        conpassword && setErrConpass(false); //password policy is crct hide error msg\n        setonErrinputPass({\n            ...onErrinputPass,\n            email: findEmptyOrNotLoginInput(passwordValue.newPassword),\n            confirmEmail: findEmptyOrNotLoginInput(passwordValue.conpassword),\n        });\n    };\n\n    /**\n     * @param  {object} event\n     * passwordType is true means this page load from reset password\n     * passwordType is false means this page from create password page\n     */\n    const _onPasswordChange = (event = {}) => {\n        event.preventDefault();\n        if (isValidForm) {\n            const validate = passwordMatchCheck(passwordValue); //check newpassword and confirm password are same\n            if (validate) {\n                if (passwordType) {\n                    dispatch(doResetPassAction({ \"token\": Retoken, \"password\": passwordEncrypt(passwordValue.newPassword) }));\n                } else {\n                    dispatch(doCreatePassword({ \"token\": Retoken, \"password\": passwordEncrypt(passwordValue.newPassword) }));\n                }\n                dispatch({ type: \"DO_LOADING_LOGIN_PAGE\", loading: true });\n            } else {\n                failToast(t(\"LOGIN.PASS_MISS\"), _customId); //password missMatch trigger this else call\n            }\n        } else {\n            setonErrinputPass({\n                ...onErrinputPass,\n                email: emptyInputErrorMsgThrow(passwordValue.newPassword),\n                confirmEmail: emptyInputErrorMsgThrow(passwordValue.conpassword),\n            });\n        }\n    };\n\n    const errorValidateShow = () => {\n        const { newPassword = false, conpassword = false } = errpasswordValue;\n        setErrNewpass(resetPasswortErrorValiDate(passwordValue.newPassword, newPassword));\n        setErrConpass(resetPasswortErrorValiDate(passwordValue.conpassword, conpassword));\n        setPasswordPolicy(false);\n    };\n\n    const handleOnClick = () => {\n        setPasswordPolicy(true);\n    };\n\n    //from reset condition true\n    useEffect(() => {\n        setPasswordType(pathChenage(pathType)); //from reset condition true\n    }, [path]); //path means,reset or creat password\n\n    if (window.localStorage.getItem(\"userData\")) { //if user logedIn not allowed This Page\n        const userRoleId = userLogRoleId();\n        const defaultPathName = userRoleId >= 4 ? \"/broadcasts\" : \"/analytics\";\n        return <Redirect to={defaultPathName} />; //return to dashBoard\n    }\n\n    return (\n        <React.Fragment>\n            {isLoading && <Loader type={\"fixed overlay\"} />}\n            <div className=\"LoginWrapper Custom\">\n                <div className=\"LoginInner grid\">\n                    <div className=\"formWrapper FPasswordWrapper grid-12\">\n                        <form onSubmit={_onPasswordChange}>\n                            <div className=\"FPasswordForm FormContainer resetpass\">\n                                <div className=\"Header\">\n                                    <i className=\"logo\">\n                                        <img src={ImgLogo} alt=\"logo\" />\n                                    </i>\n                                </div>\n                                <h2>{t(pageHeading(passwordType))}</h2>\n                                <div className=\"grp-input password\">\n                                    <div\n                                        className={errMsgDesignClass(onErrinputPass.email, errNewpass)}>\n                                        <div className={`relative ${PasswordPolicy ? \" focus \" : \"\"}`}>\n                                            <input\n                                                autoFocus\n                                                id=\"Password\"\n                                                className=\"password outline\"\n                                                name={\"newPassword\"}\n                                                type={newpasswordType}\n                                                onClick={handleOnClick}\n                                                onChange={onChangeHandler}\n                                                onBlur={errorValidateShow}\n                                                placeholder={t(\"LOGIN.NEW_PASS\")}\n                                                value={passwordValue.newPassword}\n                                            />\n                                            {/* temp hide */}\n                                            {tempHide && <PassIcon className='Icon' />}\n                                            <span\n                                                onClick={newPasswordEye}\n                                                className=\"hideView active\"\n                                            >\n                                                {\n                                                    (newpasswordType !== \"password\") ?\n                                                        <i className=\"IconPasswordView\">\n                                                            <IconPasswordViewnewicon />\n                                                        </i>\n                                                        :\n                                                        <i className=\"IconPasswordHide\">\n                                                            <IconPasswordHidenewicon />\n                                                        </i>\n                                                }\n                                            </span>\n                                            <PasswordPolicyValidation\n                                                passwordPolicy={newPasswordPolicy}\n                                            />\n                                        </div>\n                                        {errorMsgAllow(errNewpass, onErrinputPass.email) ?\n                                            <span className=\"errorMessage\">\n                                                {t(errMsg(onErrinputPass.email, errNewpass))}\n                                            </span> : null\n                                        }\n\n                                    </div>\n                                    {/* <span className={`${errorMsgAllow(errNewpass, onErrinputPass.email) ? \"error\" : \"\"} password-info`}>{t(\"ALERTS.PASSWORDPOLICY\")}</span> */}\n                                </div>\n                                <div className=\"grp-input mt-0\">\n                                    <div className={errMsgDesignClass(onErrinputPass.confirmEmail, errConpass)}>\n                                        <div className='relative'>\n                                            <input\n                                                id=\"Password\"\n                                                className=\"password outline\"\n                                                name={\"conpassword\"}\n                                                type={conpasswordType}\n                                                onChange={onChangeHandler}\n                                                onBlur={errorValidateShow}\n                                                placeholder={t(\"LOGIN.CON_PASS\")}\n                                                value={passwordValue.conpassword}\n                                            />\n                                            {/* temp hide */}\n                                            {tempHide && <PassIcon className='Icon' />}\n                                            <span className=\"hideView active\" onClick={conPasswordEye}>\n                                                {\n                                                    (conpasswordType !== \"password\") ?\n                                                        <i className=\"IconPasswordView\">\n                                                            <IconPasswordViewnewicon />\n                                                        </i>\n                                                        :\n                                                        <i className=\"IconPasswordHide\">\n                                                            <IconPasswordHidenewicon />\n                                                        </i>\n                                                }\n                                            </span>\n                                        </div>\n                                        {errorMsgAllow(onErrinputPass.confirmEmail, errConpass) ?\n                                            <span className=\"errorMessage\">\n                                                {t(errMsg(onErrinputPass.confirmEmail, errConpass))}\n                                            </span> : null\n                                        }\n                                    </div>\n                                </div>\n                                <button\n                                    type=\"submit\"\n                                    onClick={_onPasswordChange}\n                                    className={`Btn-lg`}\n                                >\n                                    <Ripples>\n                                        <span>\n                                            {t(buttonName(passwordType))}\n                                        </span>\n                                    </Ripples>\n                                </button>\n                                <div className=\"signinInfo\">\n                                    {t(\"LOGIN.ALREADY_ACCOUNT\")} {\" \"}\n                                    <Link\n                                        to='/'\n                                        className=\"link\"\n                                    >\n                                        {t(\"LOGIN.SIGN_IN\")}\n                                    </Link>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment >\n    );\n};\nexport default React.memo(ResetPassword);\n","import * as ResetPassPassTypes from '../actionTypes/ResetPassPassTypes';\n\nexport const doResetPassAction = (data = {}) => {\n    return {\n        type: ResetPassPassTypes.DO_RESETPASS_ACTION,\n        data,\n    };\n};\n\nexport const doCreatePassword = (data = {}) => {\n    return {\n        type: ResetPassPassTypes.DO_CREATE_PASSWORD,\n        data,\n    };\n};\n\nexport const doResetPassSuccess = (data = {}) => {\n    return {\n        type: ResetPassPassTypes.DO_RESETPASS_SUCCESS,\n        data,\n    };\n};\n\nexport const doResetPassFail = (data = {}) => {\n    return {\n        type: ResetPassPassTypes.DO_RESETPASS_FAIL,\n        data,\n    };\n};\n","import React from 'react';\nimport { IconTooltipGreenTick, IconTooptipDownArrow } from '../../assets/images';\n\nconst PasswordPolicyValidation = (props = {}) => {\n    const { passwordPolicy = {} } = props;\n    const {\n        eightDigitCase = false,\n        numberCase = false,\n        upperCase = false,\n        specialCase = false,\n        lowerCase = false,\n    } = passwordPolicy;\n    return (\n        <div className='password-format'>\n            <IconTooptipDownArrow />\n            <h3>PASSWORD MUST CONTAIN :</h3>\n            <ul>\n                <li className={eightDigitCase ? 'passed' : ''}>\n                    {!eightDigitCase ? <span className='gray_dot'></span> : <IconTooltipGreenTick />}\n                    <p>8 or more characters</p>\n                </li>\n                <li className={numberCase ? 'passed' : ''}>\n                    {!numberCase ? <span className='gray_dot'></span> : <IconTooltipGreenTick />}\n                    <p>At least 1 number</p>\n                </li>\n                <li className={(upperCase) ? 'passed' : ''}>\n                    {!upperCase ? <span className='gray_dot'></span> : <IconTooltipGreenTick />}\n                    <p>At least 1 UPPERCASE</p>\n                </li>\n                <li className={specialCase ? 'passed' : ''}>\n                    {!specialCase ? <span className='gray_dot'></span> : <IconTooltipGreenTick />}\n                    <p>At least 1 special character</p>\n                </li>\n                <li className={(lowerCase) ? 'passed' : ''}>\n                    {!lowerCase ? <span className='gray_dot'></span> : <IconTooltipGreenTick />}\n                    <p>At least 1 lowercase</p>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default PasswordPolicyValidation;\n","import store from \"../../store\";\nimport { Post } from \"../../common/httpRestServices\";\nimport { leadingAndTrailingspaceAvoid, nullCheckString } from \"../../helper\";\nimport { getCountryCallingCode } from \"react-phone-number-input\";\nimport { apiUrl, registerApiUrl } from \"../../helper/ApiUrl\";\nimport { doRegisterNewUserAction } from \"../../store/action/loginAction\";\nimport {\n  convertToLowerCase,\n  convertToUpperCase,\n  passwordEncrypt,\n  validateForm,\n} from \"../../helper/Validation\";\n\n//customer page and memberPage  name validate\nexport const nameValidate = (value = \"\") => {\n  return value.length <= 50 && value.length >= 1;\n};\n\n/**\n * @param  {string} value=\"\"\n * @returns boolean\n * validate 100 char\n */\nexport const orgValidate = (value = \"\") => {\n  return value.length <= 100 && value.length >= 1;\n};\n//emoji validation\nexport const restrictEmojiValidation = (value = \"\") => {\n  const pattern = /^[-@\\/#&$%^<>:\"{}'?|,.;*()!=+\\w\\s]*$/\n  return value.match(pattern) ? true : false\n}\n/**\n * @param  {object} data={}\n * onSubmit api call\n */\nexport const onsubmitRegister = (data = {}) => {\n  const {\n    ssoresponse = false,\n    type = \"\",\n    unique = \"\",\n    organisationNames = \"\",\n    name = \"\",\n    emailID = \"\",\n    password = \"\",\n    country = \"\",\n    phoneNum = \"\",\n    countryCode = \"IN\",\n    userRoleId = \"\",\n    organisationId = \"\"\n  } = data;\n  const passwordConvert = ssoresponse ? unique : passwordEncrypt(password);\n  const logValue = {\n    ...(ssoresponse && {\n      ssoId: leadingAndTrailingspaceAvoid(nullCheckString(unique)),\n    }),\n    ...(ssoresponse && {\n      ssoType: leadingAndTrailingspaceAvoid(nullCheckString(type)),\n    }),\n    phoneNumber: phoneNum,\n    countryCodeShort: countryCode,\n    firstName: leadingAndTrailingspaceAvoid(name),\n    emailId: leadingAndTrailingspaceAvoid(emailID),\n    country: leadingAndTrailingspaceAvoid(country),\n    countryCode: getCountryCallingCode(countryCode),\n    password: leadingAndTrailingspaceAvoid(passwordConvert),\n    organisationName: leadingAndTrailingspaceAvoid(organisationNames),\n    userRoleId: userRoleId,\n    organisationId: organisationId\n  };\n  store.dispatch(doRegisterNewUserAction(logValue)); //loader when editing customerdetails\n  store.dispatch({ type: \"REGISTER_USER_LOADER\", loading: true }); //loader when editing customerdetails\n};\n\n/**\n * success register popUp to default\n */\nexport const registerPopUpDefaultState = (data = {}) => {\n  store.dispatch({\n    type: \"ENABLE_REGISTER_SUCCESS_POP_UP\",\n    registerPopUp: null,\n  }); //loader when editing customerdetails\n};\n\nexport const hubSpotApiImplement = async (inputDetails = {}) => {\n  const {\n    organisationNames = \"\",\n    ipAddressValidate = 0,\n    name = \"\",\n    emailID = \"\",\n    localIp = \"\",\n    hupspotId = \"\",\n    country = \"\",\n    phoneNum = \"\",\n    countryCode = \"IN\",\n  } = inputDetails;\n  const newObj = {\n    country: country,\n    emailId: emailID,\n    firstName: name,\n    ipAddress: localIp,\n    hubspotutk: hupspotId,\n    phoneNumber: phoneNum,\n    countryCodeShort: countryCode,\n    organisationNames: organisationNames,\n    ipAddressValidate: ipAddressValidate,\n    countryCode: getCountryCallingCode(countryCode),\n  };\n  const response = await Post(\n    `${apiUrl}${registerApiUrl.signupStepOne}`,\n    newObj,\n    true\n  );\n  // window.sessionStorage.setItem(\"userData\", {userId : 856, name : 'asdasd'})\n  console.log(response, \"response\"); //don't remove console,\n};\n\nconst containsNumber = (str = \"\") => {\n  const reg = /\\d+/;\n  return reg.test(str);\n};\n\n/**\n * check contain have spl char added\n * @param {string} string\n */\nexport const containsSpecialCharCheck = (string = \"\") => {\n  const reg = /^((?=.*\\W)|(?=.*_))/;\n  return reg.test(string) ? true : false;\n};\n\n/**\n * one num\n * one lowerCase\n * one upperCase\n * one spl char\n * eight digit\n * @param {string} string\n */\nexport const passwordPolicyUpdate = (string = \"\") => {\n  const numberCase = containsNumber(string);\n  const specialCase = containsSpecialCharCheck(string);\n  const lowerCase = convertToUpperCase(string) !== string ? true : false;\n  const upperCase = convertToLowerCase(string) !== string ? true : false;\n  const eightDigitCase = convertToLowerCase(string).length >= 8 ? true : false;\n  return {\n    upperCase,\n    lowerCase,\n    numberCase,\n    specialCase,\n    eightDigitCase,\n  };\n};\n\n/**\n * check all key value are true\n * @param {object} errorHandleObj\n */\nexport const continueButtonhideHandle = (\n  errorHandleObj = {},\n  ssoresponse = false\n) => {\n  const {\n    nameError = false, //full name\n    emailError = false, //email\n    emailLenErr = false, //email\n    orgNameError = false, //bussiness name\n    orgwhitespace = false, //bussiness name\n    orgEmojiRestrict = false,\n    nameHtmlError = false,\n    nameEmojiRestrict = false,\n    phoneNumError = false, //phone number\n    passwordError = false, //phone number\n    namewhitespace = false, //full name\n    emailWhiteSpace = false, //email\n    passwordWhiteSpace = false, //password\n    bussinessNameHtmlError = false,\n    termsAndConditionsError = false,\n  } = errorHandleObj;\n  const newObj = {\n    nameError,\n    emailError,\n    emailLenErr,\n    termsAndConditionsError,\n    orgEmojiRestrict,\n    nameEmojiRestrict,\n    orgNameError,\n    orgwhitespace,\n    phoneNumError,\n    ...(!ssoresponse && { passwordError: passwordError }), //false only validate\n    ...(!ssoresponse && { passwordWhiteSpace: passwordWhiteSpace }), //false only validate\n    nameHtmlError,\n    namewhitespace,\n    emailWhiteSpace,\n    bussinessNameHtmlError,\n  };\n  return validateForm(newObj);\n};\n\nexport const continueButtonHidden =(errorHandleObj = {},  ssoresponse = false\n  ) => {\n  const {\n    nameError = false, //full name\n    nameHtmlError = false,\n    phoneNumError = false, //phone number\n    passwordError = false, //phone number\n    namewhitespace = false, //full name\n    nameEmojiRestrict = false,\n    passwordWhiteSpace = false, //password\n    termsAndConditionsError = false,\n  } = errorHandleObj;\n  const newObj = {\n    nameError,\n    nameEmojiRestrict,\n    termsAndConditionsError,\n    phoneNumError,\n    ...(!ssoresponse && { passwordError: passwordError }), //false only validate\n    ...(!ssoresponse && { passwordWhiteSpace: passwordWhiteSpace }), //false only validate\n    nameHtmlError,\n    namewhitespace,\n  };\n  return validateForm(newObj);\n}\n"],"names":["errorMsgAllow","arguments","length","undefined","ResetPassword","props","match","params","token","Retoken","path","t","useTranslation","dispatch","useDispatch","pathType","errNewpass","setErrNewpass","useState","errConpass","setErrConpass","passwordType","setPasswordType","isValidForm","setpassValidForm","PasswordPolicy","setPasswordPolicy","conpasswordType","setConPasswordType","newpasswordType","setNewPasswordType","globalStore","useSelector","state","loginPage","isLoading","newPasswordPolicy","setNewPasswordPolicy","lowerCase","upperCase","numberCase","specialCase","eightDigitCase","passwordValue","setpasswordValue","newPassword","conpassword","errpasswordValue","seterrpasswordValue","onErrinputPass","setonErrinputPass","email","confirmEmail","onChangeHandler","event","preventDefault","name","value","_get","errors","passwordPolicyUpdate","passwordValidate","validateForm","findEmptyOrNotLoginInput","_onPasswordChange","passwordMatchCheck","data","type","ResetPassPassTypes","doResetPassAction","passwordEncrypt","doCreatePassword","loading","failToast","emptyInputErrorMsgThrow","errorValidateShow","resetPasswortErrorValiDate","useEffect","pathChenage","window","localStorage","getItem","defaultPathName","userLogRoleId","_jsx","Redirect","to","_jsxs","React","children","Loader","className","onSubmit","src","ImgLogo","alt","pageHeading","errMsgDesignClass","concat","autoFocus","id","onClick","handleOnClick","onChange","onBlur","placeholder","newPasswordEye","passwordTypeChange","IconPasswordViewnewicon","IconPasswordHidenewicon","PasswordPolicyValidation","passwordPolicy","errMsg","conPasswordEye","Ripples","buttonName","Link","IconTooptipDownArrow","IconTooltipGreenTick","nameValidate","orgValidate","restrictEmojiValidation","onsubmitRegister","ssoresponse","unique","organisationNames","emailID","password","country","phoneNum","countryCode","userRoleId","organisationId","passwordConvert","logValue","ssoId","leadingAndTrailingspaceAvoid","nullCheckString","ssoType","phoneNumber","countryCodeShort","firstName","emailId","getCountryCallingCode","organisationName","store","doRegisterNewUserAction","string","test","containsNumber","containsSpecialCharCheck","convertToUpperCase","convertToLowerCase","continueButtonhideHandle","errorHandleObj","nameError","emailError","emailLenErr","orgNameError","orgwhitespace","orgEmojiRestrict","nameHtmlError","nameEmojiRestrict","phoneNumError","passwordError","namewhitespace","emailWhiteSpace","passwordWhiteSpace","bussinessNameHtmlError","termsAndConditionsError","newObj","continueButtonHidden"],"sourceRoot":""}