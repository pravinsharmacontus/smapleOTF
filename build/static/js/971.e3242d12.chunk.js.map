{"version":3,"file":"static/js/971.e3242d12.chunk.js","mappings":"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","sources":["components/Login/ForgotPassword.jsx","store/action/forgetPassAction.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Login.scss\";\nimport _get from \"lodash/get\";\nimport Loader from \"../../common/Loader\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImgLogo, EmailIcon } from \"../../assets/images\";\nimport { leadingAndTrailingspaceAvoid } from \"../../helper\";\nimport { doForgetAction } from \"../../store/action/forgetPassAction\";\nimport { EmailValidate, validateForm } from \"../../helper/Validation\";\nimport {\n  emptyInputErrorMsgThrow,\n  findEmptyOrNotLoginInput,\n  userLogRoleId,\n} from \"./loginPageCommon\";\nimport Ripples from \"react-ripples\";\nimport { decodeRegistertoken } from \"../../helper/Encypt\";\nimport { isvalidToken } from \"../../common/helper\";\n\nconst errorManage = (emailError = false, validateError = false) => {\n  return emailError || validateError ? true : false;\n};\n\nconst errorMsg = (emailError = false, validateError = false) => {\n  if (emailError) {\n    return \"LOGIN.EMAIL_ERR_EMPTY\";\n  } else if (validateError) {\n    return \"LOGIN.EMAIL_ERR\";\n  }\n  return \"\";\n};\n\nconst ForgotPassword = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [Erroremail, setErrorEmail] = useState(false);\n  const [isValidForm, setValidForms] = useState(false);\n  const globalStore = useSelector((state) => state || {}); //store\n  const { loginPage: { isLoading = false } = {} } = globalStore; //store\n  const hostDetails = useSelector((state) => state?.tempReducer.tempToken);\n  const str = hostDetails.substring(1);\n  const decodedStringAtoB = isvalidToken(str) && atob(str); //decode the base64 token\n  const obj = decodeRegistertoken(decodedStringAtoB);\n  const { userEmailId = \"\" } = obj;\n\n  const [inputValue, setInputValues] = useState({\n    email: \"\",\n  });\n\n  const [errinputPass, seterrinputValu] = useState({\n    email: false,\n  });\n  const [onErrinputPass, setonErrinputPass] = useState({\n    email: false,\n  });\n  const onChangeHandler = (event = {}) => {\n    event.preventDefault();\n    const { name = \"\", value = \"\" } = _get(event, \"target\", {});\n    const errors = errinputPass;\n    if (name === \"email\") {\n      errors.email = EmailValidate(userEmailId === \"\" ? value : userEmailId);\n    }\n    setInputValues({ ...inputValue, [name]: value });\n    seterrinputValu(errors);\n    setValidForms(validateForm(errors));\n    const { email = false } = errors; //on email type on field validate\n    email && setErrorEmail(false);\n    setonErrinputPass({\n      ...onErrinputPass,\n      email: findEmptyOrNotLoginInput(\n        userEmailId === \"\" ? inputValue.email : userEmailId\n      ),\n    });\n  };\n\n  /**\n   *onSubmit\n   */\n  const _onSubmit = (e = {}) => {\n    e.preventDefault();\n    const forgetParams = {\n      email: leadingAndTrailingspaceAvoid(\n        userEmailId === \"\" ? inputValue.email : userEmailId\n      ),\n    };\n    if (isValidForm) {\n      //email format is validation done,call dispatch method\n      dispatch(doForgetAction(forgetParams));\n      dispatch({ type: \"DO_LOADING_LOGIN_PAGE\", loading: true });\n    } else {\n      setonErrinputPass({\n        ...onErrinputPass,\n        email: emptyInputErrorMsgThrow(\n          userEmailId === \"\" ? inputValue.email : userEmailId\n        ),\n      });\n    }\n  };\n\n  const errorValidateShow = () => {\n    const { email = false } = errinputPass;\n    setErrorEmail(inputValue.email ? !email : false);\n  };\n\n  const handleEnterPress = (e = {}) => {\n    if (e.code === \"Enter\") {\n      errorValidateShow();\n      _onSubmit(e);\n    }\n  };\n\n  if (window.localStorage.getItem(\"userData\")) {\n    const userRoleId = userLogRoleId();\n    const defaultPathName = userRoleId >= 4 ? \"/broadcasts\" : \"/analytics\";\n    return <Redirect to={defaultPathName} />;\n  }\n\n  return (\n    <React.Fragment>\n      {isLoading && <Loader type={\"fixed overlay\"} />}\n      <div className=\"LoginWrapper Custom\">\n        <div className=\"LoginInner grid\">\n          <div className=\"formWrapper FPasswordWrapper grid-12\">\n            <form onSubmit={_onSubmit}>\n              <div className=\"FPasswordForm FormContainer\">\n                <div className=\"Header\">\n                  <i className=\"logo\">\n                    <img src={ImgLogo} alt=\"logo\" />\n                  </i>\n                </div>\n                <h2>Forgot Password</h2>\n                <div\n                  className={`grp-input ${\n                    userEmailId === \"\" ? \" readonly \" : \" \"\n                  }`}\n                >\n                  <div\n                    className={\n                      onErrinputPass.email || Erroremail\n                        ? \"input error\"\n                        : \" input \"\n                    }\n                  >\n                    <input\n                      id=\"Email\"\n                      type=\"email\"\n                      name={\"email\"}\n                      autoComplete={\"off\"}\n                      onBlur={errorValidateShow}\n                      onKeyDown={handleEnterPress}\n                      autoFocus\n                      value={\n                        userEmailId === \"\" ? inputValue.email : userEmailId\n                      }\n                      className=\"outline\"\n                      placeholder={t(\"LOGIN.EMAIL_PLACE_HOLDER\")}\n                      onChange={(event) => onChangeHandler(event)}\n                      readOnly={(userEmailId === \"\" ? false : true )}\n                    />\n                    <EmailIcon className=\"Icon\" />\n                    {errorManage(onErrinputPass.email, Erroremail) ? (\n                      <span className=\"errorMessage\">\n                        {t(errorMsg(onErrinputPass.email, Erroremail))}\n                      </span>\n                    ) : null}\n                  </div>\n                </div>\n                <Ripples\n                  type=\"submit\"\n                  className={`Btn-lg`}\n                  onClick={(e) => _onSubmit(e)}\n                >\n                  {t(\"LOGIN.SUBMIT\")}\n                </Ripples>\n                <div className=\"signinInfo\">\n                  {t(\"LOGIN.ALREADY_ACCOUNT\")}{\" \"}\n                  <Link data-auto-id=\"signinInfo\" to=\"/\" className=\"link\">\n                    <span>{t(\"LOGIN.SIGN_IN\")}</span>\n                  </Link>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\nexport default React.memo(ForgotPassword);\n","import * as forgetPassTypes from '../actionTypes/forgetPassTypes';\n\nexport const doForgetAction = (data = {}) => {\n    return {\n        type: forgetPassTypes.DO_FORGET_ACTION,\n        data,\n    };\n};\n\nexport const doForgetSuccess = (data = {}) => {\n    return {\n        type: forgetPassTypes.DO_FORGET_SUCCESS,\n        data,\n    };\n};\n\nexport const doForgetFail = (data = {}) => {\n    return {\n        type: forgetPassTypes.DO_FORGET_FAIL,\n        data,\n    };\n};\n"],"names":["errorManage","arguments","length","undefined","errorMsg","ForgotPassword","t","useTranslation","dispatch","useDispatch","Erroremail","setErrorEmail","useState","isValidForm","setValidForms","globalStore","useSelector","state","loginPage","isLoading","str","tempReducer","tempToken","substring","decodedStringAtoB","isvalidToken","atob","obj","decodeRegistertoken","userEmailId","inputValue","setInputValues","email","errinputPass","seterrinputValu","onErrinputPass","setonErrinputPass","_onSubmit","preventDefault","forgetParams","leadingAndTrailingspaceAvoid","data","type","forgetPassTypes","doForgetAction","loading","emptyInputErrorMsgThrow","errorValidateShow","window","localStorage","getItem","defaultPathName","userLogRoleId","_jsx","Redirect","to","_jsxs","React","children","Loader","className","onSubmit","src","ImgLogo","alt","concat","id","name","autoComplete","onBlur","onKeyDown","e","code","autoFocus","value","placeholder","onChange","event","_get","errors","EmailValidate","validateForm","findEmptyOrNotLoginInput","onChangeHandler","readOnly","EmailIcon","Ripples","onClick","Link"],"sourceRoot":""}